{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","tasks","useState","activeTask","setactiveTask","style","setStyle","class","onClick","len","length","setTimeout","Math","floor","random","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4LA2DeA,MAvDf,WACE,IAAIC,EAAQ,CACV,iBACA,0BACA,sBACA,iBACA,SACA,mBACA,OACA,eACA,gBACA,UACA,cACA,kBACA,cACA,qBACA,gBAMF,EAAoCC,mBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA0BF,mBAAS,SAAnC,mBAAOG,EAAP,KAAcC,EAAd,KAuBA,OACE,qCACE,qBAAKC,MAAOF,EAAZ,SAAqBJ,EAAME,KAC3B,wBAAQK,QAvBO,WACjB,IAAMC,EAAMR,EAAMS,OACZJ,EAAS,UACfK,YAAW,WACbP,EAAcQ,KAAKC,MAAMD,KAAKE,SAAWL,IACrCH,EAAS,WACZ,MAiBG,0BCzCSS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.8f0463c0.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\nimport './App.css';\n\n\nfunction App() {\n  let tasks = [\n    'Play with pets',\n    'Clean pantry 15 minutes',\n    'Check for recycling',\n    'Organize couch',\n    'Vacuum',\n    'Break down boxes',\n    'Weed',\n    'Check Trello',\n    'Wipe counters',\n    'Compost',\n    'Brush teeth',\n    'Pick up clothes',\n    'Make a list',\n    'Work on a playlist',\n    'Clean toilet'\n  ];\n\n  let allTasks = tasks;\n\n\n  const [activeTask, setactiveTask] = useState(0);\n  const [style, setStyle] = useState('.null');\n\n\n  const randomTask = () => {\n    const len = tasks.length;\n          setStyle('strike');\n    setTimeout(() => {\n  setactiveTask(Math.floor(Math.random() * len));\n      setStyle('.null');\n}, 1000);\n\n  };\n  const nope = () => {\n    const index = tasks[activeTask];\n\n    tasks = tasks.filter((item) => item !== index);\n\n    console.log(tasks);\n  };\n\n  const reset = () => {\n    tasks = allTasks;\n  };\n  return (\n    <>\n      <div class={style} >{tasks[activeTask]}</div>\n      <button onClick={randomTask}> not now</button>\n\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}